
1. 它的全局架构是怎样的？

2. 它如何做到高效渲染的？

3. 它如何做到高可扩展的？

4. 它的输入系统是怎样的？

5. 它的错误处理系统是怎样的？

6. 每个实体类的渲染是怎样的？

7. TimeSystem是什么东西？

8. EventReporter

9. TouchFilter

10. ObjectManager

11. RenderSystem
	它维护一个双缓冲渲染队列，当update完所有对象时，就进行一次交换缓冲区。交换完之后，就把前面缓冲队列清空。
	在交换缓冲队列时，会把当前的队列传给GameRenderer，让GameRenderer在渲染时，可以把当前队列的对象都渲染到屏幕上。
	scheduleForDraw负责把一个对象添加到队列里面，然后等待渲染。
	意思就是，那些脏了的对象就提交到renderSystem，然后等待渲染，渲染完之后就把队列的对象都清空，然后等待下一次的渲染和交换。

12. RenderElementPool
	维护一个渲染对象池，可以通过这个池进行创建和销毁。

13. PhasedObject

14. GameRenderer
	它调用一堆的OpenGL进行设置，然后在onDrawFrame时，把当前的渲染队列取出来进行逐一渲染。
	在队列里面取出的对象是RenderElement，然后对它的mDrawable进行渲染。这个不是很理解。


15. element.cameraRelative
